#!/usr/bin/env node

/**
 * Module dependencies.
 */
//서버 초기화 과정
 var app = require('../app');
 var debug = require('debug')('iotserver:server');
 var http = require('http');
 
 /**
  * Get port from environment and store in Express.
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 var server = http.createServer(app);
//서버 초기화 과정 끝


 // Connect Mongo DB 
 var mongoDB = require("mongodb").MongoClient;
 var url = "mongodb://127.0.0.1:27017/IoTDB"; //Robo 3T
 var dbObj = null;
 mongoDB.connect(url, function(err, db){
   dbObj = db; //dbOdbj == mongoDB객체
   console.log("DB connect"); //성공적인 연결
 });
 
 /**
  * MQTT subscriber (MQTT Server connection & Read resource data)
  */
 var mqtt = require("mqtt");
 var client = mqtt.connect("mqtt://127.0.0.1") //자기 자신을 얘기하는 IP 주소
 
 // 접속에 성공하면, 3가지 토픽을 구독.
 client.on("connect", function(){
   client.subscribe("Isol"); //격리환자 구독
   console.log("Subscribing Isol");
   client.subscribe("Def"); //확진자 구독
   console.log("Subscribing def");
   client.subscribe("Death"); // 사망자 구독
   console.log("Subscribing death");
 })

// MQTT 응답 메세지 수신시 동작
 client.on("message", function(topic, message){
   console.log(topic+ ": " + message.toString()); // 수신한 메세지 Topic 출력
   var obj = JSON.parse(message); // 수신한 메세지의 데이터를 obj 저장
   obj.create_at = new Date(); // 현재 날짜 데이터를 obj에 추가함.

   if (topic == "Isol"){ // 만약 토픽이 격리환자라면,
     var Isol  = dbObj.collection("Isol"); // Isol이란 이름을 갖은 collection 선택
     Isol.save(obj, function(err, result){ // collection에 격리환자 데이터 저장
       //error가 일어나면 에러출력, 아니면 저장된 데이터 출력
      if (err){
         console.log(err);
       }else{
         console.log(JSON.stringify(result));
       }		
     });	
   }else if (topic == "Def"){ // 만약 토픽이 확진자라면,
     var Def  = dbObj.collection("Def"); // Def 라는 이름을 갖은 collection 선택
     Def.save(obj, function(err, result){ // collection에 확진자 데이터 저장
       if (err){
         console.log(err);
       }else{
         console.log(JSON.stringify(result));
       }		
     });
   }else if (topic == "Death"){ // 만약 토픽이 사망자라면,
     var Death  = dbObj.collection("Death"); // Death 라는 이름을 갖은 collection 선택
     Death.save(obj, function(err, result){ // collection에 사망자 데이터 저장
       if (err){
         console.log(err);
       }else{
         console.log(JSON.stringify(result));
       }		
     });
   }
 });
  
 // get data from MongDB and then send it to HTML page using socket
 // Mongo DB에서 최근 데이터 불러와서, HTML 페이지에 업데이트
 var io = require("socket.io")(server); //package.json에서  "socket.io": "^2.0.4" 실행
 io.on("connection", function(socket){
   socket.on("socket_evt_update", function(data){ //"socket_evt_update"이란 이름을 가진 이벤트가 수신이 되면 아래코드 실행
     var Isol = dbObj.collection("Isol"); // Isol 라는 이름의 collection 선택
     var Def = dbObj.collection("Def"); // Def 라는 이름의 collection 선택
     var Death = dbObj.collection("Death"); // Death 라는 이름의 collection 선택

     // 격리 데이터
     Isol.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
       // collection에서 가장 최근 데이터 정렬-> 하나의 데이터만 불러옴 -> 배열로 만듬
       if(!err){
         console.log("----------------------");
         console.log(results[0]);
         socket.emit("socket_up_Isol", JSON.stringify(results[0]));
       }
     });
     // 확진자 데이터
     Def.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
       // collection에서 가장 최근 데이터 정렬-> 하나의 데이터만 불러옴 -> 배열로 만듬
       if(!err){
         console.log(results[0]);
         socket.emit("socket_up_Def", JSON.stringify(results[0]));
       }
     });
     // 사망자 데이터
     Death.find({}).sort({_id:-1}).limit(1).toArray(function(err, results){
       // collection에서 가장 최근 데이터 정렬-> 하나의 데이터만 불러옴 -> 배열로 만듬
       if(!err){
         console.log(results[0]);
         socket.emit("socket_up_Death", JSON.stringify(results[0]));
       }
     });
   });
   
   //HTML 페이지에서 버튼이 눌리면 LCD 제어를 위해 MQTT publish
   socket.on("socket_evt_bnt",function(data){
     //버튼에 따라서 data(on/off) publish
    console.log("publishing btn");
    console.log(data);
    //publish
    client.publish("btn",data); //topic
   });
 });
 
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 function normalizePort(val) {
   var port = parseInt(val, 10);
   if (isNaN(port)) {
     // named pipe
     return val;
   }
   if (port >= 0) {
     // port number
     return port;
   }
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 